import pygame
import math
import random

# set display
pygame.init()
WIDTH, HEIGHT = 800, 500
win = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Hangman Game!")

# button variables
RADIUS = 20
GAP = 15
letters = []
startx = round((WIDTH - (RADIUS * 2 + GAP) * 13) / 2)
starty = 400
A = 65
for i in range(26):
    x = startx + GAP * 2 + ((RADIUS * 2 + GAP) * (i % 13))
    y = starty + ((i // 13) * (GAP + RADIUS * 2))
    letters.append([x, y, chr(A + i), True])

# fonts
LETTER_FONT = pygame.font.SysFont('comicsans', 40)
WORLD_FONT = pygame.font.SysFont('comicsans', 60)
TITLE_FONT = pygame.font.SysFont('comicsans', 70)

# load images
images = []
for i in range(7):
    image = pygame.image.load("hangman" + str(i) + ".png")
    images.append(image)

# game variables
hangman_status = 4
words = ["ABYSS", "BLISS", "CRYPT", "DUSK", "EMBER", "FABLE", "GLOOM", "HAVEN", "IVORY", "JESTER", "KNOT", "LAMENT", "MIRAGE", "NEBULA", "OPUS", "PHANTOM", "QUILL", "REVERIE", "SERAPH", "TWILIGHT"]
word = random.choice(words)
guessed = []

# colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

def draw():
    win.fill(WHITE)
    # draw title
    text = TITLE_FONT.render("GUESS THE WORD", 1, BLACK)
    win.blit(text, (WIDTH/2 - text.get_width()/2, 20))


    # draw word
    display_word = ""
    for letter in word:
        if letter in guessed:
            display_word += letter + " "
        else:
            display_word += "_ "
    text = WORD_FONT.render(display_word,  1, BLACK)
    win.blit(text, (400, 200))

    # draw buttons
    for letter in letters:
        x, y, ltr, visible = letter
        if visible:
          pygame.draw.circle(win, BLACK, (x, y), RADIUS, 3)
          text = LETTER_FONT.render(ltr, 1, BLACK)
          win.blit(text, (x - text.get_width() / 2, y - text.get_height() / 2))

    win.blit(images[hangman_status], (150, 100))
    pygame.display.update()



def display_message(message):
    pygame.time.delay(1000)
    win.fill(WHITE)
    text = WORLD_FONT.render(message, 1, BLACK)
    win.bit(text, (WIDTH/2 - text.get_width()/2, HEIGHT/2 - 
    text.get_height()/2))
    pygame.display.update()
    pygame.time.delay(3000)

def main_menu():
    win.fill(WHITE)
    text = TITLE_FONT.render("HANGMAN GAME", 1, BLACK)
    win.blit(text, (WIDTH/2 - text.get_width()/2, HEIGHT/4))

    start_text = WORLD_FONT.render("CLICK TO START", 1, BLACK)
    win.blit(start_text, (WIDTH/2 - start_text.get_width()/2, HEIGHT/2))
    pygame.display.update()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                return  # Start the game


def retry_menu():
    win.fill(WHITE)
    text = WORLD_FONT.render("GAME OVER", 1, BLACK)
    win.blit(text, (WIDTH/2 - text.get_width()/2, HEIGHT/3))

    retry_text = WORLD_FONT.render("CLICK TO RETRY", 1, BLACK)
    win.blit(retry_text, (WIDTH/2 - retry_text.get_width()/2, HEIGHT/2))
    pygame.display.update()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                return  # Retry the game


# Update the main function to include retry and menu
def draw():
    win.fill(WHITE)
    # draw title
    text = TITLE_FONT.render("GUESS THE WORD", 1, BLACK)
    win.blit(text, (WIDTH/2 - text.get_width()/2, 20))

    # draw hint button
    pygame.draw.rect(win, BLACK, hint_button, 2)
    hint_text = LETTER_FONT.render("HINT", 1, BLACK)
    win.blit(hint_text, (hint_button.x + hint_button.width/2 - hint_text.get_width()/2, 
                         hint_button.y + hint_button.height/2 - hint_text.get_height()/2))

    # draw word
    display_word = ""
    for letter in word:
        if letter in guessed:
            display_word += letter + " "
        else:
            display_word += "_ "
    text = WORD_FONT.render(display_word,  1, BLACK)
    win.blit(text, (400, 200))

    # draw buttons
    for letter in letters:
        x, y, ltr, visible = letter
        if visible:
            pygame.draw.circle(win, BLACK, (x, y), RADIUS, 3)
            text = LETTER_FONT.render(ltr, 1, BLACK)
            win.blit(text, (x - text.get_width() / 2, y - text.get_height() / 2))

    win.blit(images[hangman_status], (150, 100))
    pygame.display.update()

# Hint Function
def provide_hint():
    remaining_letters = [ltr for ltr in word if ltr not in guessed]
    if remaining_letters:
        hint_letter = random.choice(remaining_letters)
        guessed.append(hint_letter)

# Update Main Function to Handle Hint Button
def main():
    global hangman_status, guessed, word

    word = random.choice(words)
    guessed = []
    hangman_status = 0

    FPS = 60
    clock = pygame.time.Clock()
    run = True

    while run:
        clock.tick(FPS)

        draw()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
            if event.type == pygame.MOUSEBUTTONDOWN:
                m_x, m_y = pygame.mouse.get_pos()
                # Check hint button click
                if hint_button.collidepoint(m_x, m_y):
                    provide_hint()
                # Check letter buttons click
                for letter in letters:
                    x, y, ltr, visible = letter
                    dis = math.sqrt((x - m_x)**2 + (y - m_y)**2)
                    if dis < RADIUS and visible:
                        letter[3] = False
                        guessed.append(ltr)
                        if ltr not in word:
                            hangman_status += 1

        won = all(letter in guessed for letter in word)

        if won:
            display_message("Nice Job! You Won!")
            retry_menu()
            break

        if hangman_status == 6:
            display_message(f"You LOST! The word was {word}")
            retry_menu()
            break

# Main Program
while True:
    main_menu()
    main()